# BUILDARCH is the host architecture
# ARCH is the target architecture
# we need to keep track of them separately
BUILDARCH ?= $(shell uname -m)
BUILDOS ?= $(shell uname -s | tr A-Z a-z)

# canonicalized names for host architecture
ifeq ($(BUILDARCH),aarch64)
        BUILDARCH=arm64
endif
ifeq ($(BUILDARCH),x86_64)
        BUILDARCH=amd64
endif
ifeq ($(BUILDARCH),armv71)
        BUILDARCH=arm
endif

# unless otherwise set, I am building for my own architecture, i.e. not cross-compiling
ARCH ?= $(BUILDARCH)

# canonicalized names for target architecture
ifeq ($(ARCH),aarch64)
        override ARCH=arm64
endif
ifeq ($(ARCH),x86_64)
        override ARCH=amd64
endif
ifeq ($(ARCH),armv71)
        override ARCH=arm
endif

ARCHES=$(patsubst docker-image/Dockerfile.%,%,$(wildcard docker-image/Dockerfile.*))
EXCLUDEARCH ?=
VALIDARCHES = $(filter-out $(EXCLUDEARCH),$(ARCHES))

BINARIES_FILES = bird birdcl bird6
BINARIES = $(addprefix dist/$(ARCH)/,$(BINARIES_FILES))

CONTAINER_BASENAME ?= bird
CONTAINER_NAME ?= calico/$(CONTAINER_BASENAME)

# Version of this repository as reported by git.
CALICO_GIT_VER := $(shell git describe --tags --dirty --always)

# because we are not using the default Makefile
where-am-i = $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
# so we can use names in targets
escapefs = $(subst :,---,$(subst /,___,$(1)))
unescapefs = $(subst ---,:,$(subst ___,/,$(1)))

# Variables for controlling image tagging and pushing.
DOCKER_REPOS=calico quay.io/calico
ifeq ($(RELEASE),true)
# If this is a release, also tag and push GCR images.
DOCKER_REPOS+=gcr.io/projectcalico-org eu.gcr.io/projectcalico-org asia.gcr.io/projectcalico.org us.gcr.io/projectcalico.org
endif

.PHONY: do-build build build-all image image-all push push-all ci cd
MYMAKE = $(MAKE) -f $(call where-am-i)


build: $(BINARIES)
$(BINARIES):
	$(MYMAKE) do-build ARCH=$(ARCH)

do-build:
	ARCH=$(ARCH) ./build.sh


build-all:
	ARCH=all ./build.sh

image: $(CONTAINER_NAME)
$(CONTAINER_NAME): $(BINARIES)
	docker build -t $(CONTAINER_NAME):latest-$(ARCH) -f docker-image/Dockerfile.$(ARCH) dist/$(ARCH)

image-all: $(addprefix sub-image-,$(VALIDARCHES))
sub-image-%:
	$(MYMAKE) image ARCH=$*

## push one arch
push: imagetag $(addprefix sub-single-push-,$(call escapefs,$(DOCKER_REPOS)))

sub-single-push-%:
	docker push $(call unescapefs,$*/$(CONTAINER_BASENAME):$(IMAGETAG)-$(ARCH))
ifeq ($(ARCH),amd64)
	docker push $(call unescapefs,$*/$(CONTAINER_BASENAME):$(IMAGETAG))
endif


## push all supported arches
push-all: imagetag $(addprefix sub-push-,$(VALIDARCHES))
sub-push-%:
	$(MYMAKE) push ARCH=$* IMAGETAG=$(IMAGETAG)

## tag images of one arch
tag-images: imagetag $(addprefix sub-single-tag-images-,$(call escapefs,$(DOCKER_REPOS)))

sub-single-tag-images-%:
	docker tag $(CONTAINER_NAME):latest-$(ARCH) $(call unescapefs,$*/$(CONTAINER_BASENAME):$(IMAGETAG)-$(ARCH))
ifeq ($(ARCH),amd64)
	docker tag $(CONTAINER_NAME):latest-$(ARCH) $(call unescapefs,$*/$(CONTAINER_BASENAME):$(IMAGETAG))
endif



## tag images of all archs
tag-images-all: imagetag $(addprefix sub-tag-images-,$(VALIDARCHES))
sub-tag-images-%:
	$(MYMAKE) tag-images ARCH=$* IMAGETAG=$(IMAGETAG)

imagetag:
ifndef IMAGETAG
	$(error IMAGETAG is undefined - run using make <target> IMAGETAG=X.Y.Z)
endif


###############################################################################
# CI/CD
###############################################################################
.PHONY: ci cd
## Run what CI runs
ci: image-all test-protocol-support

## Deploys images to registry
cd:
ifndef CONFIRM
	$(error CONFIRM is undefined - run using make <target> CONFIRM=true)
endif
ifndef BRANCH_NAME
	$(error BRANCH_NAME is undefined - run using make <target> BRANCH_NAME=var or set an environment variable)
endif
	$(MYMAKE) tag-images-all push-all IMAGETAG=${BRANCH_NAME} EXCLUDEARCH="$(EXCLUDEARCH)"
	$(MYMAKE) tag-images-all push-all IMAGETAG=$(shell git describe --tags --dirty --always --long) EXCLUDEARCH="$(EXCLUDEARCH)"

# Test that the image we've just built supports the BIRD config that
# we expect it to.
TEST_CONFIG := docker run --rm \
		-v `pwd`/docker-image/test-config:/test-config \
		-w /test-config \
		--entrypoint=/bird \
		$(CONTAINER_NAME):latest-$(BUILDARCH) \
		-p -c
test-protocol-support: image
	# invalid.conf is not BIRD config at all, so we expect BIRD to
	# find it invalid.  So here we're testing that our testing is
	# effective.
	! $(TEST_CONFIG) invalid.conf
	# bird.cfg (plus its includes bird_aggr.cfg and bird_ipam.cfg)
	# is actual confd-generated config grabbed from a confd test
	# run.
	$(TEST_CONFIG) bird.cfg
	# bfd.conf contains an empty "protocol bfd" block, so tests
	# that our image supports BFD.
	$(TEST_CONFIG) bfd.conf
